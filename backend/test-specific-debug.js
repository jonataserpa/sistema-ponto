// Teste espec√≠fico para debugar a fun√ß√£o tentarExtrairDadosLinha

const linhaReal = "07:00 - 12:00 - 13:00 - 16:00 - 06:36 - 16:2605/05/2508:00-01:50---ALESSANDRO ROBERTO GARCIA7791";

console.log('=== DEBUG ESPEC√çFICO DA FUN√á√ÉO tentarExtrairDadosLinha ===\n');

function tentarExtrairDadosLinha(linha) {
  console.log('\n=== PROCESSANDO LINHA ===');
  console.log(`Linha original: "${linha}"`);
  console.log(`Tamanho da linha: ${linha.length}`);

  // 1. Buscar data no formato dd/mm/aa
  const regexData = /(\d{2}\/\d{2}\/\d{2})/;
  const matchData = linha.match(regexData);
  
  if (!matchData) {
    console.log('‚ùå Nenhuma data encontrada no formato dd/mm/aa');
    return null;
  }

  const data = matchData[1];
  const posicaoData = linha.indexOf(data);
  console.log(`‚úÖ Data encontrada: "${data}"`);
  console.log(`üìç Posi√ß√£o da data na linha: ${posicaoData}`);

  // 2. Extrair a parte ap√≥s a data para buscar nome e matr√≠cula
  const parteAposData = linha.substring(posicaoData + data.length);
  console.log(`üìù Parte ap√≥s a data: "${parteAposData}"`);
  console.log(`üìè Tamanho da parte ap√≥s data: ${parteAposData.length}`);
  
  // 3. Extrair nome e matr√≠cula da parte ap√≥s a data
  const regexNomeMatricula = /([A-Z√Å√ä√á√ï√Ä√Ç√É√â√ç√ì√ö√ú√ë\s]+?)(\d{3,6})$/;
  console.log(`üîç Regex usado: ${regexNomeMatricula}`);
  
  const matchNomeMatricula = parteAposData.match(regexNomeMatricula);
  console.log(`üéØ Match resultado:`, matchNomeMatricula);
  
  if (!matchNomeMatricula) {
    console.log(`‚ùå N√£o foi poss√≠vel extrair nome e matr√≠cula da parte ap√≥s data`);
    
    // Debug adicional - vamos testar outros regex
    console.log('\nüîß TENTATIVAS DE DEBUG:');
    
    // Teste 1: Regex mais simples
    const regexSimples = /(.+?)(\d{3,6})$/;
    const matchSimples = parteAposData.match(regexSimples);
    console.log(`Teste 1 - Regex simples /(.+?)(\\d{3,6})$/: `, matchSimples);
    
    // Teste 2: Procurar apenas n√∫meros no final
    const regexNumeros = /(\d{3,6})$/;
    const matchNumeros = parteAposData.match(regexNumeros);
    console.log(`Teste 2 - Apenas n√∫meros /(\d{3,6})$/: `, matchNumeros);
    
    // Teste 3: Analisar caractere por caractere
    console.log('\nüìä An√°lise caractere por caractere dos √∫ltimos 20 caracteres:');
    const ultimos20 = parteAposData.slice(-20);
    for (let i = 0; i < ultimos20.length; i++) {
      const char = ultimos20[i];
      const code = char.charCodeAt(0);
      console.log(`  ${i}: "${char}" (${code}) - ${code >= 65 && code <= 90 ? 'MAI√öSCULA' : code >= 97 && code <= 122 ? 'min√∫scula' : code >= 48 && code <= 57 ? 'N√öMERO' : code === 32 ? 'ESPA√áO' : 'OUTRO'}`);
    }
    
    return null;
  }

  const nomeCompleto = matchNomeMatricula[1].trim();
  const matricula = matchNomeMatricula[2];
  
  console.log(`‚úÖ Matr√≠cula encontrada: "${matricula}"`);
  console.log(`‚úÖ Nome encontrado: "${nomeCompleto}"`);

  // 4. Validar dados m√≠nimos
  if (nomeCompleto.length < 3) {
    console.log(`‚ùå Nome muito curto: "${nomeCompleto}"`);
    return null;
  }

  if (matricula.length < 3) {
    console.log(`‚ùå Matr√≠cula muito curta: "${matricula}"`);
    return null;
  }

  // 5. Extrair jornada (hor√°rios antes da data)
  const parteAntesData = linha.substring(0, posicaoData);
  console.log(`üìù Parte antes da data: "${parteAntesData}"`);
  
  let jornada = '';
  
  // Buscar padr√µes de hor√°rio na parte antes da data
  const regexHorarios = /(\d{2}:\d{2})/g;
  const horarios = parteAntesData.match(regexHorarios) || [];
  console.log(`‚è∞ Hor√°rios encontrados na jornada: [${horarios.join(', ')}]`);
  
  if (horarios.length >= 4) {
    jornada = `${horarios[0]} - ${horarios[1]} - ${horarios[2]} - ${horarios[3]}`;
  } else if (horarios.length >= 2) {
    jornada = `${horarios[0]} - ${horarios[1]}`;
  }

  // 6. Extrair ponto (parte entre data e nome)
  const inicioNome = parteAposData.search(/[A-Z√Å√ä√á√ï√Ä√Ç√É√â√ç√ì√ö√ú√ë]/);
  console.log(`üìç In√≠cio do nome na parte ap√≥s data: ${inicioNome}`);
  
  let ponto = '';
  
  if (inicioNome > 0) {
    ponto = parteAposData.substring(0, inicioNome).trim();
    console.log(`üìù Ponto bruto: "${ponto}"`);
    // Limpar caracteres especiais do ponto
    ponto = ponto.replace(/^[-\s]+/, '').replace(/[-\s]+$/, '');
    console.log(`üìù Ponto limpo: "${ponto}"`);
  }

  // 7. Verificar se √© falta
  const isFalta = linha.includes('Falta') || ponto.includes('-----');

  // 8. Extrair observa√ß√µes
  let observacoes = '';
  if (linha.includes('Falta')) {
    observacoes = 'Falta';
  } else if (linha.includes('Folga')) {
    observacoes = 'Folga';
  } else if (linha.includes('Segunda')) {
    observacoes = 'Segunda-feira';
  }

  const resultado = {
    data,
    matricula,
    nome: nomeCompleto,
    jornada: jornada || 'N√£o informado',
    ponto: ponto || (isFalta ? 'Falta' : ''),
    observacoes,
    linha: linha.trim()
  };

  console.log('‚úÖ Dados extra√≠dos com sucesso:', resultado);
  return resultado;
}

// Testar com a linha real
console.log('Testando com linha real do PDF:');
const resultado = tentarExtrairDadosLinha(linhaReal);

if (resultado) {
  console.log('\nüéâ SUCESSO! Dados extra√≠dos:');
  console.log(`  Data: ${resultado.data}`);
  console.log(`  Matr√≠cula: ${resultado.matricula}`);
  console.log(`  Nome: ${resultado.nome}`);
  console.log(`  Jornada: ${resultado.jornada}`);
  console.log(`  Ponto: ${resultado.ponto}`);
} else {
  console.log('\n‚ùå FALHA na extra√ß√£o de dados');
} 