// Debug espec√≠fico para os casos mencionados pelo usu√°rio

const casos = [
  {
    nome: "ANA LUCIA ANDRADE PEIXOTO",
    linha: "05/05/25    886     ANA LUCIA ANDRADE PEIXOTO      08:00 - 12:00 - 13:00 - 17:00    Falta                      -      -     -     -     -     -     08:00",
    esperado: { falta: true, batidas: [] }
  },
  {
    nome: "ELISA ESTER DE PAIVA", // Corrigindo o nome
    linha: "05/05/25   6861     ELISA ESTER DE PAIVA           09:00 - 12:00 - 13:00 - 18:00    12:01 - 12:33 - 18:00      -      -     00:33 -     -     07:27",
    esperado: { falta: false, batidas: ["12:01", "12:33", "18:00"] }
  },
  {
    nome: "LAVINIA APARECIDA DA SILVA BERNARDES",
    linha: "05/05/25  11667     LAVINIA APARECIDA DA SILVA BERNARDES  09:00 - 12:00 - 13:00 - 18:00    08:55 - 12:00 - 12:38 - 18:03    -      -     -     -     -     -     08:00",
    esperado: { falta: false, batidas: ["08:55", "12:00", "12:38", "18:03"] }
  }
];

console.log('=== AN√ÅLISE DOS CASOS ESPEC√çFICOS ===\n');

function tentarExtrairDadosLinha(linha) {
  console.log(`\n--- ANALISANDO LINHA ---`);
  console.log(`Linha: "${linha}"`);
  console.log(`Tamanho: ${linha.length}`);

  // 1. Buscar data no formato dd/mm/aa
  const regexData = /(\d{2}\/\d{2}\/\d{2})/;
  const matchData = linha.match(regexData);
  
  if (!matchData) {
    console.log('‚ùå Nenhuma data encontrada');
    return null;
  }

  const data = matchData[1];
  const posicaoData = linha.indexOf(data);
  console.log(`‚úÖ Data encontrada: "${data}" na posi√ß√£o ${posicaoData}`);

  // 2. Extrair a parte ap√≥s a data
  const parteAposData = linha.substring(posicaoData + data.length);
  console.log(`üìù Parte ap√≥s a data: "${parteAposData}"`);
  
  // 3. NOVA L√ìGICA: Buscar matr√≠cula no in√≠cio da parte ap√≥s a data
  const regexMatricula = /^\s*(\d{3,6})\s+/;
  const matchMatricula = parteAposData.match(regexMatricula);
  
  if (!matchMatricula) {
    console.log(`‚ùå N√£o foi poss√≠vel extrair matr√≠cula`);
    return null;
  }

  const matricula = matchMatricula[1];
  console.log(`‚úÖ Matr√≠cula: "${matricula}"`);

  // 4. Extrair o resto ap√≥s a matr√≠cula
  const restoAposMatricula = parteAposData.substring(matchMatricula[0].length);
  console.log(`üìù Resto ap√≥s matr√≠cula: "${restoAposMatricula}"`);

  // 5. Buscar o nome (letras mai√∫sculas e espa√ßos at√© encontrar hor√°rio ou palavra especial)
  const regexNome = /^([A-Z√Å√ä√á√ï√Ä√Ç√É√â√ç√ì√ö√ú√ë\s]+?)(?=\s+\d{2}:\d{2}|\s+Falta|\s+Segunda|\s+Ter√ßa|\s+Quarta|\s+Quinta|\s+Sexta)/;
  const matchNome = restoAposMatricula.match(regexNome);
  
  if (!matchNome) {
    console.log(`‚ùå N√£o foi poss√≠vel extrair nome`);
    return null;
  }

  const nomeCompleto = matchNome[1].trim();
  console.log(`‚úÖ Nome: "${nomeCompleto}"`);

  // 6. Extrair o resto ap√≥s o nome
  const restoAposNome = restoAposMatricula.substring(matchNome[0].length).trim();
  console.log(`üìù Resto ap√≥s nome: "${restoAposNome}"`);

  // 7. Separar jornada e ponto
  let jornada = '';
  let ponto = '';

  // Procurar por jornada (4 hor√°rios seguidos no formato HH:MM - HH:MM - HH:MM - HH:MM)
  const regexJornada = /^(\d{2}:\d{2}\s*-\s*\d{2}:\d{2}\s*-\s*\d{2}:\d{2}\s*-\s*\d{2}:\d{2})/;
  const matchJornada = restoAposNome.match(regexJornada);

  if (matchJornada) {
    jornada = matchJornada[1];
    console.log(`üìã Jornada encontrada: "${jornada}"`);
    
    // O que vem depois da jornada √© o ponto
    const restoAposJornada = restoAposNome.substring(matchJornada[0].length).trim();
    console.log(`üìù Resto ap√≥s jornada: "${restoAposJornada}"`);
    
    // L√ìGICA CORRIGIDA: Extrair sequ√™ncia de hor√°rios como ponto
    // Procurar por uma sequ√™ncia de hor√°rios (HH:MM - HH:MM - HH:MM...) ou palavra especial
    const regexPonto = /^(\d{2}:\d{2}(?:\s*-\s*\d{2}:\d{2})*|Falta|Segunda|Ter√ßa|Quarta|Quinta|Sexta)/i;
    const matchPonto = restoAposJornada.match(regexPonto);
    
    if (matchPonto) {
      ponto = matchPonto[1].trim();
    } else {
      // Fallback: pegar tudo at√© encontrar um "-" isolado (n√£o entre hor√°rios)
      const partesResto = restoAposJornada.split(/\s+-\s+/);
      ponto = partesResto[0].trim();
    }
  } else {
    // Se n√£o tem jornada, procurar por sequ√™ncia de hor√°rios ou palavra especial
    const regexPontoSemJornada = /^(\d{2}:\d{2}(?:\s*-\s*\d{2}:\d{2})*|Falta|Segunda|Ter√ßa|Quarta|Quinta|Sexta)/i;
    const matchPontoSemJornada = restoAposNome.match(regexPontoSemJornada);
    
    if (matchPontoSemJornada) {
      ponto = matchPontoSemJornada[1].trim();
    } else {
      // Fallback: pegar tudo at√© encontrar um "-" isolado
      const partesResto = restoAposNome.split(/\s+-\s+/);
      ponto = partesResto[0].trim();
    }
  }

  console.log(`üéØ Ponto extra√≠do: "${ponto}"`);

  // 8. Analisar o conte√∫do do ponto para determinar se √© falta
  const contemFalta = ponto.toLowerCase().includes('falta') || 
                     ponto.toLowerCase().includes('segunda') ||
                     ponto.toLowerCase().includes('ter√ßa') ||
                     ponto.toLowerCase().includes('quarta') ||
                     ponto.toLowerCase().includes('quinta') ||
                     ponto.toLowerCase().includes('sexta');

  console.log(`üîç Cont√©m palavra de falta: ${contemFalta}`);

  // 9. Extrair hor√°rios do ponto (apenas se n√£o for falta)
  let batidasPonto = [];
  if (!contemFalta) {
    const regexHorarios = /\d{2}:\d{2}/g;
    batidasPonto = ponto.match(regexHorarios) || [];
  }

  console.log(`‚è∞ Batidas extra√≠das do ponto: [${batidasPonto.join(', ')}]`);

  // 10. Determinar se √© falta
  const isFalta = contemFalta || batidasPonto.length === 0;

  console.log(`‚ùì √â falta: ${isFalta}`);

  return {
    data,
    matricula,
    nome: nomeCompleto,
    jornada,
    ponto,
    batidas: batidasPonto,
    falta: isFalta
  };
}

// Testar cada caso
casos.forEach((caso, index) => {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`CASO ${index + 1}: ${caso.nome}`);
  console.log(`${'='.repeat(60)}`);
  
  const resultado = tentarExtrairDadosLinha(caso.linha);
  
  if (resultado) {
    console.log(`\nüìä RESULTADO:`);
    console.log(`   Nome: ${resultado.nome}`);
    console.log(`   Matr√≠cula: ${resultado.matricula}`);
    console.log(`   Falta: ${resultado.falta}`);
    console.log(`   Batidas: [${resultado.batidas.join(', ')}]`);
    
    console.log(`\nüéØ ESPERADO:`);
    console.log(`   Falta: ${caso.esperado.falta}`);
    console.log(`   Batidas: [${caso.esperado.batidas.join(', ')}]`);
    
    console.log(`\n‚úÖ VERIFICA√á√ÉO:`);
    const faltaCorreto = resultado.falta === caso.esperado.falta;
    const batidasCorretas = JSON.stringify(resultado.batidas) === JSON.stringify(caso.esperado.batidas);
    
    console.log(`   Falta: ${faltaCorreto ? '‚úÖ' : '‚ùå'} (${resultado.falta} vs ${caso.esperado.falta})`);
    console.log(`   Batidas: ${batidasCorretas ? '‚úÖ' : '‚ùå'} ([${resultado.batidas.join(', ')}] vs [${caso.esperado.batidas.join(', ')}])`);
    
    if (!faltaCorreto || !batidasCorretas) {
      console.log(`\nüîß PROBLEMAS IDENTIFICADOS:`);
      if (!faltaCorreto) {
        console.log(`   - Falta incorreta: esperado ${caso.esperado.falta}, obtido ${resultado.falta}`);
      }
      if (!batidasCorretas) {
        console.log(`   - Batidas incorretas: esperado [${caso.esperado.batidas.join(', ')}], obtido [${resultado.batidas.join(', ')}]`);
      }
    }
  } else {
    console.log(`‚ùå FALHA: N√£o foi poss√≠vel extrair dados da linha`);
  }
});

console.log(`\n${'='.repeat(60)}`);
console.log('AN√ÅLISE CONCLU√çDA');
console.log(`${'='.repeat(60)}`); 